import bcrypt
import secrets
import string
import tkinter as tk
from tkinter import messagebox, font

# Store user data (use a database or secure file in production)
user_db = {}

def hash_password(password):
    """Generate a bcrypt hash of the password."""
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode(), salt)
    return hashed

def register_user(username, password):
    """Register a new user with a hashed password."""
    if username in user_db:
        messagebox.showerror("Error", "Username already exists.")
        return False
    user_db[username] = hash_password(password)
    messagebox.showinfo("Success", f"User '{username}' registered successfully!")
    return True

def verify_password(stored_password, provided_password):
    """Verify the provided password against the stored hashed password."""
    return bcrypt.checkpw(provided_password.encode(), stored_password)

def login_user(username, password):
    """Login a user by checking if the password matches the stored hash."""
    if username not in user_db:
        messagebox.showerror("Error", "Username not found.")
        return False
    if verify_password(user_db[username], password):
        messagebox.showinfo("Login", "Login successful!")
        return True
    else:
        messagebox.showerror("Error", "Incorrect password.")
        return False

def suggest_password():
    """Generate a strong random password suggestion."""
    length = 12
    alphabet = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(secrets.choice(alphabet) for _ in range(length))
    password_entry.delete(0, tk.END)
    password_entry.insert(0, password)
    messagebox.showinfo("Suggested Password", f"Suggested Password: {password}")

def check_password_strength(event):
    """Check and display password strength based on length and complexity."""
    password = password_entry.get()
    if len(password) < 6:
        strength = "Weak"
        color = "#E74C3C"  # Red
    elif len(password) >= 6 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password):
        strength = "Medium"
        color = "#F1C40F"  # Yellow
    elif len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password) and any(c in string.punctuation for c in password):
        strength = "Strong"
        color = "#2ECC71"  # Green
    else:
        strength = "Weak"
        color = "#E74C3C"  # Red
    
    strength_label.config(text=f"Password Strength: {strength}", fg=color)

# Setup Tkinter window
root = tk.Tk()
root.title("Creative Authentication System")
root.geometry("400x400")
root.configure(bg="#2E4053")  # Dark background for a modern look

# Fonts
heading_font = font.Font(family="Helvetica", size=16, weight="bold")
button_font = font.Font(family="Helvetica", size=10, weight="bold")

# Background Frame for Gradient Effect
background_frame = tk.Frame(root, bg="#2E4053")
background_frame.pack(fill=tk.BOTH, expand=True)

# Heading
heading = tk.Label(background_frame, text="Welcome to Auth System", font=heading_font, fg="#F7DC6F", bg="#2E4053")
heading.pack(pady=15)

# Username Entry
tk.Label(background_frame, text="Username:", font=button_font, fg="#AED6F1", bg="#2E4053").pack(pady=5)
username_entry = tk.Entry(background_frame, width=30)
username_entry.pack(pady=5)

# Password Entry
tk.Label(background_frame, text="Password:", font=button_font, fg="#AED6F1", bg="#2E4053").pack(pady=5)
password_entry = tk.Entry(background_frame, show="*", width=30)
password_entry.pack(pady=5)

# Password Strength Indicator
strength_label = tk.Label(background_frame, text="Password Strength: ", font=button_font, fg="#E74C3C", bg="#2E4053")
strength_label.pack(pady=5)
password_entry.bind("<KeyRelease>", check_password_strength)  # Update strength on typing

# Register Button
register_button = tk.Button(background_frame, text="Register", font=button_font, bg="#58D68D", fg="white",
                            command=lambda: register_user(username_entry.get(), password_entry.get()))
register_button.pack(pady=10)

# Login Button
login_button = tk.Button(background_frame, text="Login", font=button_font, bg="#5DADE2", fg="white",
                         command=lambda: login_user(username_entry.get(), password_entry.get()))
login_button.pack(pady=10)

# Suggest Password Button
suggest_button = tk.Button(background_frame, text="Suggest Strong Password", font=button_font, bg="#AF7AC5", fg="white",
                           command=suggest_password)
suggest_button.pack(pady=10)

root.mainloop()
